

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>Lil Martin</title>
  <subtitle>一个菜鸡前端程序员博主。</subtitle>
  <updated>2022-01-25T00:21:03+08:00</updated>
  <author>
    <name>Martin_Du</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en-US"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2022 Martin_Du </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>算法篇：全排列(eg:蓝桥杯 ALGO-1005 数字游戏)</title>
    <link href="/posts/AL-Search/" rel="alternate" type="text/html" title="算法篇：全排列(eg:蓝桥杯 ALGO-1005 数字游戏)" />
    <published>2022-01-24T10:00:00+08:00</published>
  
    <updated>2022-01-24T10:00:00+08:00</updated>
  
    <id>/posts/AL-Search/</id>
    <content src="/posts/AL-Search/" />
    <author>
      <name>Martin_Du</name>
    </author>

  
    
    <category term="Algorithm" />
    
    <category term="Lanqiao" />
    
  

  
    <summary>
      





      全排列

顾名思义：就是将所有元素按照一定顺序排列一遍。


  例如：现在有一组数组[1,2,3]

  这个数组全排列的结果就是 { [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] }

  这么说就懂了吧！


那么如何用 编程 解决呢？

说到排列，那么最常用的自然是递归！

那么问题又来了，怎么 “递”？

咱先来个思维导图（以下图中的数组为例）



一般对某一个数组进行排列的顺序是从后往前，将前面的部分固定，对后面的序列子集进行排列。



此时就需要划分 一条 分割线，说是一条，实际上每个元素的左侧都有一条分割线，但这条“分割线”只能向右移动，移动到最右侧后失效。

最外层分割线的划分是从右往左的，当划分了最外层分割先后，右侧的分割线均视为子集分割线。

如下图：



第一次排列：即按字典序（由小到大）排列。...
    </summary>
  

  </entry>

  
  <entry>
    <title>@vueRouter3.x Basic</title>
    <link href="/posts/Vue-Router/" rel="alternate" type="text/html" title="@vueRouter3.x Basic" />
    <published>2021-12-22T09:43:20+08:00</published>
  
    <updated>2021-12-22T09:43:20+08:00</updated>
  
    <id>/posts/Vue-Router/</id>
    <content src="/posts/Vue-Router/" />
    <author>
      <name>Martin_Du</name>
    </author>

  
    
    <category term="vue" />
    
    <category term="vue-router" />
    
  

  
    <summary>
      





      基础

安装请看官方文档router-vue

基础路由匹配

html

&amp;lt;script src="https://unpkg.com/vue/dist/vue.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="https://unpkg.com/vue-router/dist/vue-router.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;div id="app"&amp;gt;
  &amp;lt;h1&amp;gt;Hello App!&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;!-- 使用 router-link 组件来导航. --&amp;gt;
    &amp;lt;!-- 通过传入 `to` 属性指定链接. --&amp;gt;
    &amp;lt;!-- &amp;lt;router-link&amp;gt; 默认会被渲染成一个 `&amp;lt;a&amp;gt;` 标签 --...
    </summary>
  

  </entry>

  
  <entry>
    <title>@vue/cli4.x脚手架使用</title>
    <link href="/posts/Vue-Cli-Review/" rel="alternate" type="text/html" title="@vue/cli4.x脚手架使用" />
    <published>2021-12-20T09:25:20+08:00</published>
  
    <updated>2021-12-20T09:25:20+08:00</updated>
  
    <id>/posts/Vue-Cli-Review/</id>
    <content src="/posts/Vue-Cli-Review/" />
    <author>
      <name>Martin_Du</name>
    </author>

  
    
    <category term="vue" />
    
    <category term="vue-cli" />
    
  

  
    <summary>
      





      脚手架基础知识

安装及创建项目

vue cli官方文档 讲的很清楚

项目结构

目录结构

├── public
│   └── index.html
├── src
|   ├── main.js				# 项目的初始化
|   ├── App.vue				# 项目的入口组件
|	├── assest			 	# 项目中展示的图片或者全局样式
|	│   ├── css
|	│   ├── img
|	│   └── ...
|	├── api
|	│   └── ... 			# 抽取出API请求
|	├── components
|	│   └── ...				# 项目中可复用的组件
|	├── view				# 视图界面组件（我理解的是路由对应的组件
|	│   └── ...				
|	├── store
|	|	├── index.js        # 我...
    </summary>
  

  </entry>

  
  <entry>
    <title>vue2.x基本概念</title>
    <link href="/posts/Vue-Basic/" rel="alternate" type="text/html" title="vue2.x基本概念" />
    <published>2021-11-20T16:25:20+08:00</published>
  
    <updated>2021-11-20T16:25:20+08:00</updated>
  
    <id>/posts/Vue-Basic/</id>
    <content src="/posts/Vue-Basic/" />
    <author>
      <name>Martin_Du</name>
    </author>

  
    
    <category term="vue" />
    
    <category term="vue-2x-basic" />
    
  

  
    <summary>
      





      简介

官网介绍Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。


  个人观点：（刚刚从React过来）

  区别：

  
    
      react在每更新一个组件之后，都会以这个组件为根，向上或向下将整个组件树都更新一遍。如果不需要，则需要手动配置shouldComponentUpadate。

      而vue非常明确的更新你需要更新的那个组件。
    
    
      react使用的渲染语法为JSX，偏向逻辑。

      Vue使用的渲染语法为模板字符串，偏向最原始的htm...
    </summary>
  

  </entry>

  
  <entry>
    <title>系统分析与设计--建立需求模型</title>
    <link href="/posts/SoftwareEngineer/" rel="alternate" type="text/html" title="系统分析与设计--建立需求模型" />
    <published>2021-11-09T00:16:09+08:00</published>
  
    <updated>2021-11-09T00:16:09+08:00</updated>
  
    <id>/posts/SoftwareEngineer/</id>
    <content src="/posts/SoftwareEngineer/" />
    <author>
      <name>Martin_Du</name>
    </author>

  
    
    <category term="software-engineer" />
    
    <category term="system-analysis-and-design" />
    
  

  
    <summary>
      





      需求模型

事件

分类


  外部事件
    
      发生在系统之外
      由外部的代理人或参与者所启动
    
  
  临时事件（定时事件）
    
      在到达某个时间点之后，自动发生的事件
      根据系统的截止日期
    
  
  状态事件
    
      系统内部发生的某件事触发处理的需要
    
  


事件列表


  
    
      事件
      触发
      来源
      用例
      回应
      目的地
    
  
  
    
      一个完整的句子
      动词
      名词
      动名词短语
      形容词加名词
      名词
    
    
      顾客想要检查商品是否能供货
      商品查询
      顾客
      检查商品是是...
    </summary>
  

  </entry>

</feed>


